##
#
# THIS FILE IS AUTOGENERATED - EDIT THE PART FILES, NOT THIS FILE
#
##

##
#
# zshrc.d/00.zsh
#
##

# /etc/zsh/zshrc: system-wide .zshrc file for zsh(1).

# This file is sourced only for interactive shells.
# It should contain commands to set up aliases, functions,
# options, key bindings, etc.
#
# Global Order: zshenv, zprofile, zshrc, zlogin

READNULLCMD=${PAGER:-/usr/bin/pager}

[[ -n $(alias run-help) ]] && unalias run-help
autoload run-help


### Settings from OH-MY-ZSH ###

# Set to this to use case-sensitive completion
CASE_SENSITIVE="true"

# Uncomment this to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
export UPDATE_ZSH_DAYS=1

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Oh-my-zsh automatically sets the terminal title to the running command.
# We prefer to set the title ourselves, so we disable auto title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

##
#
# zshrc.d/apple-terminal.zsh
#
##

# Correctly display UTF-8 with combining characters.
# This code seems to come from the default OSX OhMyZsh.
if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi

##
#
# zshrc.d/autoload-compinit.zsh
#
##

###
#
# autoload & compinit
#
# autoload:
#
#   -U Suppress the usual alias expansion during reading.
#      This is recommended for the use of functions supplied
#      with the zsh distribution.
#
#   -z use zsh native, not ksh emulation, as if the option
#      KSH_AUTOLOAD were unset or were set, respectively.
#
# compinit, i.e. man zshcompsys:
#
# For security reasons compinit checks if the completion system would
# use files not owned by root or by the current user, or files in
# directories that are world- or group-writable or that are not owned
# by root or by the current user. If such files or directories are
# found, compinit will ask if the completion system should really be
# used.
#
#   -u use all the files, without asking, avoiding these tests
#
#   -i ignore insecure files and directories, silently.
#
#   -C skip the entire security check
#
#   -d dump to cache
#
# We prefer to skip the entire security check, because our typical
# zsh setups deliberately use non-root users and non-root groups.
# For example, we use an "admin" group and group-writeable paths.
#
# This is different than what typical zsh expects i.e. the paths
# must be owned by root or the user, and must not be group write.
#
# Our opinion is zsh should not try to be responsible for path
# permissions, therefore we use compinit -C to skip checking.
#
# If you don't want compinit called here, place this line:
#
#     skip_global_compinit=1
#
# in your $ZDOTDIR/.zshenv or $ZDOTDIR/.zprofile

if [[ -z "$skip_global_compinit" ]]; then
   autoload -Uz compinit 
   compinit -C -d ~/.zcompdump
fi

##
#
# zshrc.d/bindkey.zsh
#
##

# bindkey settings
#
# TODO: research if the below items are useful additions.
#
#     # emacs style key binding
#     bindkey -e
#
#     # backward delete
#     bindkey "\e[3~" delete-char

if [[ "$TERM" != emacs ]]; then

# Bind emacs
[[ -z "$terminfo[kdch1]" ]] || bindkey -M emacs "$terminfo[kdch1]" delete-char
[[ -z "$terminfo[khome]" ]] || bindkey -M emacs "$terminfo[khome]" beginning-of-line
[[ -z "$terminfo[kend]" ]] || bindkey -M emacs "$terminfo[kend]" end-of-line
[[ -z "$terminfo[kich1]" ]] || bindkey -M emacs "$terminfo[kich1]" overwrite-mode

# Bind vicmd
[[ -z "$terminfo[kdch1]" ]] || bindkey -M vicmd "$terminfo[kdch1]" vi-delete-char
[[ -z "$terminfo[khome]" ]] || bindkey -M vicmd "$terminfo[khome]" vi-beginning-of-line
[[ -z "$terminfo[kend]" ]] || bindkey -M vicmd "$terminfo[kend]" vi-end-of-line
[[ -z "$terminfo[kich1]" ]] || bindkey -M vicmd "$terminfo[kich1]" overwrite-mode

# Bind viins
[[ -z "$terminfo[cuu1]" ]] || bindkey -M viins "$terminfo[cuu1]" vi-up-line-or-history
[[ -z "$terminfo[cuf1]" ]] || bindkey -M viins "$terminfo[cuf1]" vi-forward-char
[[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line-or-history
[[ -z "$terminfo[kcud1]" ]] || bindkey -M viins "$terminfo[kcud1]" vi-down-line-or-history
[[ -z "$terminfo[kcuf1]" ]] || bindkey -M viins "$terminfo[kcuf1]" vi-forward-char
[[ -z "$terminfo[kcub1]" ]] || bindkey -M viins "$terminfo[kcub1]" vi-backward-char

# Bind viins ncurses fogyatekos
[[ "$terminfo[kcuu1]" == "O"* ]] && bindkey -M viins "${terminfo[kcuu1]/O/[}" vi-up-line-or-history
[[ "$terminfo[kcud1]" == "O"* ]] && bindkey -M viins "${terminfo[kcud1]/O/[}" vi-down-line-or-history
[[ "$terminfo[kcuf1]" == "O"* ]] && bindkey -M viins "${terminfo[kcuf1]/O/[}" vi-forward-char
[[ "$terminfo[kcub1]" == "O"* ]] && bindkey -M viins "${terminfo[kcub1]/O/[}" vi-backward-char
[[ "$terminfo[khome]" == "O"* ]] && bindkey -M viins "${terminfo[khome]/O/[}" beginning-of-line
[[ "$terminfo[kend]" == "O"* ]] && bindkey -M viins "${terminfo[kend]/O/[}" end-of-line
[[ "$terminfo[khome]" == "O"* ]] && bindkey -M emacs "${terminfo[khome]/O/[}" beginning-of-line
[[ "$terminfo[kend]" == "O"* ]] && bindkey -M emacs "${terminfo[kend]/O/[}" end-of-line

fi

##
#
# zshrc.d/chruby.zsh
#
##

f=/usr/local/share/chruby/chruby.sh && test -r $f && source $f
RUBIES+=(`find /opt/ruby -depth 2 2>/dev/null | grep -v current`)

##
#
# zshrc.d/disable-log.zsh
#
##

# This snippet comes from the Apple OSX OhMyZsh.
# TODO: figure out what this does. :)
disable log

##
#
# zshrc.d/options.zsh
#
##

# Tab completion moves to end of word.
setopt ALWAYS_TO_END

# Auto change directories, e.g. "/foo" does a "cd /foo".
setopt AUTO_CD

# Automatically list choices on an ambiguous completion.
setopt AUTO_LIST

# Background processes run full speed
unsetopt BGNICE

# Don't chase directory dots because they exist for a reason.
unsetopt CHASE_DOTS

# Don't chase symlinks because they exist for a reason.
unsetopt CHASE_LINKS

# Report the status of background and suspended jobs before exiting a shell.
setopt CHECK_JOBS

# Enable tab completion in the middle of a word.
setopt COMPLETE_IN_WORD

# Don't correct mistakes.
unsetopt CORRECT
unsetopt CORRECT_ALL

# Place the location of each command in the hash table.
setopt HASH_CMDS

# When a command runs, hash the directory containing it and parents.
setopt HASH_DIRS

# Skip command line in the history list if it duplicates the previous line.
setopt HIST_IGNORE_DUPS

# Restart running processes on exit.
setopt HUP

# No beep ever.
setopt NO_BEEP

# Enable variable substitution in the prompt.
setopt PROMPT_SUBST

# Share history between zsh processes.
setopt SHARE_HISTORY


##
#
# zshrc.d/prompts.zsh
#
##

PROMPT='$ '

##
#
# zshrc.d/rbenv.zsh
#
##

if [[ -r "$HOME/.rbenv" ]]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

##
#
# zshrc.d/zstyle.zsh
#
##

# zstyle
#
# zstyle handles styles for context-sensitive configuration information.
# zstyle is used by zsh compsys, vcs_info, and oher shell subsystems.
#
# zstyle syntax:
#
#     zstyle "context-pattern" style value
#
# The system looks up the value of a style, and tries to match with pattern.
# The longer the pattern, the more specific it is, and higher the precendence.
#
# Style settings with broad context patterns are useful to set default values.
# Style setting with more-specific pattern are useful to override defaults.
#
# For example, when the zsh completion system is running, zstyle searches
# for all context patterns that starts with ":completion:".
#
# For example:
#
#     zstyle ':completion:*' verbose yes
#
# In the above command, anytime the `verbose' style is looked up in compsys,
# zstyle will yield the value `yes', unless there is another setting for the
# `verbose' style that is more specific, than ":completion:*", like:
#
#     zstyle ':completion:*:complete:ls:*:*' verbose no
#
# Our general preferences:
#
#   * Put settings for fonts and colors in personal files, not here.
#   * Use settings for our typical systems e.g. plenty of CPU and RAM.
#
# Credit:
#
#   * http://zsh.sourceforge.net/Guide/zshguide06.html
#   * http://www.masterzen.fr/2009/04/19/in-love-with-zsh-part-one/
#   * https://github.com/andreivolt/dotfiles/blob/master/zshrc
#   * http://unix.stackexchange.com/questions/2179/rebuild-auto-complete-index-or-whatever-its-called-and-binaries-in-path-cach
#
###

###
#
# Format
#
###

# zstyle can use format strings for typical output and errors:
#
#  * messages
#  * warnings
#  * corrections
#  * descriptions
#
# We prefer these global files to use format strings with plain text only,
# i.e. no font family (bold, underline, etc.), no colors, no escapes, etc.
# This is because we want maximum portability and maximum compatibility.
#
# If you prefer different format strings, please do not change these here;
# instead, set your own format strings by using your own user zshrc files.
#
# Font family format codes:
#
#     %B %b  Bold
#     %U %u  Underline
#
# Color ideas: https://wiki.archlinux.org/index.php/Color_Bash_Prompt
#
# For example to set purple messages and set red warnings:
#
#     zstyle ':completion:*:messages' format $'\e[01;35m%d\e[00;00m'
#     zstyle ':completion:*:warnings' format $'\e[01;31mNo match\e[00;00m'
#
# If you're doing font format strings in your own files, and want color,
# we suggest you set variables rather than using escape codes directly:
#
#     $fg           Use the foreground color
#     $reset_color  Reset the color
#
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format "No match: %d"
zstyle ':completion:*:corrections' format '%d (errors: %e)%b'
zstyle ':completion:*:descriptions' format '%d'

###
#
# Misc
#
###

# menu select: do menu-driven completion. If an ambiguous completion
# produces at least <NUM> possibilities, menu selection is started.
#
# You can understand this best by trying it. One of the completions in
# the list, initially the top-leftmost, is highlighted and inserted
# into the line. By moving the cursor in the obvious directions (with
# wraparound at the edges), you change both the value highlighted and
# the value inserted into the line. When you have the value you want,
# hit return, which removes the list and leaves the inserted value.
#
# Hitting ^G (the editor function send-break) aborts menu selection,
# removes the list and restores the command line.
zstyle ':completion:*' menu select

# verbose: many completion functions can generate matches in a simple
# form and a verbose form. zstyle uses the "verbose" style to decide
# which to use. We prefer always using the verbose form.
zstyle ':completion:*' verbose yes

# rehash: montinuously update completions. This tells zsh not to trust
# its cache when completing. There is a performance cost.
#
#   * The cost is negligible on a typical desktop setting today.
#
#   * The cost may be significant if you have $PATH on NFS,
#     or you are using a system that is RAM-starved.
#
zstyle ':completion:*' rehash yes

###
#
# TODO: annotate everything below
#
###

zstyle ':completion:*' completer _complete _approximate

#TODO: manuals
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''

zstyle -e ':completion:*:approximate:*' max-errors \
          'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'

zstyle ':completion:*:sudo:*' command-path \
  /usr/local/sbin \
  /usr/local/bin \
  /usr/sbin \
  /usr/bin \
  /sbin \
  /bin \
  /usr/X11R6/bin

# Color completion for some things.
# http://linuxshellaccount.blogspot.com/2008/12/color-completion-using-zsh-modules-on.html
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*' group-name ''

## faster completion
#zstyle ':completion:*' accept-exact '*(N)'
#zstyle ':completion::complete:*' use-cache on
#zstyle ':completion::complete:*' cache-path ~/.tmp/.zsh-cache

## completion Styles
## list of completers to use
#zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

## allow selection from a menu
#zstyle ':completion:*' menu select=1 _complete _ignored _approximate
#zstyle -e ':completion:*' list-colors 'thingy=${PREFIX##*/} reply=( "=(#b)($thingy)(?)*=00=$color[blue]" )'

## match uppercase from lowercase, except for approximate completions
#zstyle ':completion:*:(^approximate):*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
## don't complete parent directory
#zstyle ':completion:*' ignore-parents parent pwd

##' # character that separates matches from their description
#zstyle ':completion:*' list-separator
#

## ignore completion functions for missing commands
#zstyle ':completion:*:functions' ignored-patterns '_*'

## fuzzy matching of mistyped completions
#zstyle ':completion:*' completer _complete _match _approximate
#zstyle ':completion:*:match:*' original only

## increase number of errors allowed with length of input
#zstyle -e ':completion:*:approximate:*' \
#  max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'
#
#zstyle ':completion:*' group-name '' # group messages by group name
#zmodload zsh/complist
#zstyle ':completion:*:default' list-prompt '%S%M matches%s' # scroll long completion lists
#bindkey -M listscroll q send-break # quit pager with 'q'
#bindkey -M menuselect '\C-o' accept-and-menu-complete # in menu seletion, Ctrl-o to accept the match but remain in menu selection
#bindkey '^[[Z' reverse-menu-complete

## approximate completion
#zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
#zstyle ':completion::::' completer _complete _approximate
#zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) )' # allow one error for every three characters typed

## prefix completion
#setopt  complete_in_word
#zstyle ':completion::*:::' completer _complete _prefix
#zstyle ':completion:*:prefix:*' add-space true

## correct mistyped prefixes
#zstyle ':completion:::::' complete _complete _approximate
#zstyle ':completion::approximate*:*' prefix-needed false

## ignore already listed files
#zstyle ':completion:*:(mv|cp|diff|vi):*' ignore-line yes
